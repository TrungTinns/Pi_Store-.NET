//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PiStore
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PiStoreDBEntities : DbContext
    {
        public PiStoreDBEntities()
            : base("name=PiStoreDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<View_Client> View_Client { get; set; }
        public virtual DbSet<View_Employee> View_Employee { get; set; }
        public virtual DbSet<View_Orders> View_Orders { get; set; }
        public virtual DbSet<View_Product> View_Product { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> sp_AddClient(Nullable<int> clientID, string clientName, string clientEmail, string clientPhone, string clientAddress)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var clientEmailParameter = clientEmail != null ?
                new ObjectParameter("ClientEmail", clientEmail) :
                new ObjectParameter("ClientEmail", typeof(string));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_AddClient", clientIDParameter, clientNameParameter, clientEmailParameter, clientPhoneParameter, clientAddressParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_AddEmployee(Nullable<int> employeeID, string employeeName, string employeeEmail, string employeePhone, string employeeAddress, Nullable<double> employeeSalary, Nullable<System.DateTime> hireDate)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeePhoneParameter = employeePhone != null ?
                new ObjectParameter("EmployeePhone", employeePhone) :
                new ObjectParameter("EmployeePhone", typeof(string));
    
            var employeeAddressParameter = employeeAddress != null ?
                new ObjectParameter("EmployeeAddress", employeeAddress) :
                new ObjectParameter("EmployeeAddress", typeof(string));
    
            var employeeSalaryParameter = employeeSalary.HasValue ?
                new ObjectParameter("EmployeeSalary", employeeSalary) :
                new ObjectParameter("EmployeeSalary", typeof(double));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_AddEmployee", employeeIDParameter, employeeNameParameter, employeeEmailParameter, employeePhoneParameter, employeeAddressParameter, employeeSalaryParameter, hireDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_AddProduct(Nullable<int> productID, string productName, string productDescription, Nullable<double> productPrice, Nullable<int> quantity)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("ProductPrice", productPrice) :
                new ObjectParameter("ProductPrice", typeof(double));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_AddProduct", productIDParameter, productNameParameter, productDescriptionParameter, productPriceParameter, quantityParameter);
        }
    
        public virtual int sp_DeleteClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteClient", clientIDParameter);
        }
    
        public virtual int sp_DeleteEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteEmployee", employeeIDParameter);
        }
    
        public virtual int sp_DeleteProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProduct", productIDParameter);
        }
    
        public virtual int sp_UpdateClient(Nullable<int> clientID, string clientName, string clientEmail, string clientPhone, string clientAddress)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var clientEmailParameter = clientEmail != null ?
                new ObjectParameter("ClientEmail", clientEmail) :
                new ObjectParameter("ClientEmail", typeof(string));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClient", clientIDParameter, clientNameParameter, clientEmailParameter, clientPhoneParameter, clientAddressParameter);
        }
    
        public virtual int sp_UpdateEmployee(Nullable<int> employeeID, string employeeName, string employeeEmail, string employeePhone, string employeeAddress, Nullable<double> employeeSalary, Nullable<System.DateTime> hireDate)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeePhoneParameter = employeePhone != null ?
                new ObjectParameter("EmployeePhone", employeePhone) :
                new ObjectParameter("EmployeePhone", typeof(string));
    
            var employeeAddressParameter = employeeAddress != null ?
                new ObjectParameter("EmployeeAddress", employeeAddress) :
                new ObjectParameter("EmployeeAddress", typeof(string));
    
            var employeeSalaryParameter = employeeSalary.HasValue ?
                new ObjectParameter("EmployeeSalary", employeeSalary) :
                new ObjectParameter("EmployeeSalary", typeof(double));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmployee", employeeIDParameter, employeeNameParameter, employeeEmailParameter, employeePhoneParameter, employeeAddressParameter, employeeSalaryParameter, hireDateParameter);
        }
    
        public virtual int sp_UpdateProduct(Nullable<int> productID, string productName, string productDescription, Nullable<double> productPrice, Nullable<int> quantity)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("ProductDescription", productDescription) :
                new ObjectParameter("ProductDescription", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("ProductPrice", productPrice) :
                new ObjectParameter("ProductPrice", typeof(double));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProduct", productIDParameter, productNameParameter, productDescriptionParameter, productPriceParameter, quantityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAccount(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAccount", usernameParameter, passwordParameter);
        }
    }
}
